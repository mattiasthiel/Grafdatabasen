@{
    ViewBag.Title = "Graf";
}

<div id="visual">
</div>

<div id="legend">

</div>

<div class="row">
    <p>&nbsp;</p>
    <div id="graph" style="width:100%; height:100%;">

    </div>
    <div id="details" class="col-md-4 pull-right" hidden="hidden">
        <div class="panel panel-default" style="z-index:1000">
            <div class="panel-heading">
                <button type="button" id="hide" class="close pull-right" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h3 class="panel-title">Detaljer</h3>
            </div>
            <div class="panel-body">
                <div id="detailContent"></div>
            </div>
        </div>

    </div>
</div>

<style>
    #details {margin-top: 80px;}
    circle {
        stroke-width: 1.5px;
    }

    .node text {
        pointer-events: none;
        font: 10px sans-serif;
    }

    text {
        font: 10px sans-serif;
        pointer-events: none;
        /*text-anchor: middle;*/
    }

    .link {
        stroke: #999;
    }

    .legend {
    }

    #legend {
        position: absolute;
        top: 80px;
        left: 10px;
        z-index: 3;
        padding: 5px;
        background-color: white;
        opacity: 0.8;
    }

    .Assigment {
    }

    #visual {
        position:absolute;
        top:60px;
        left:10px;
    }

    #panel {
        position: absolute;
        top: 80px;
        right: 200px;
        z-index: 10;
        opacity: 0.5;
    }
</style>

<script type="text/javascript" src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="http://d3js.org/d3.v3.min.js" type="text/javascript"></script>

<script type="text/javascript">
    $(document).ready(function () {

        var request = ajaxneo4j("match path= (n)-[r]-() return path");
        //var request = ajaxneo4j("match path= (a:Konsult)-[r]->(b:Uppgift)-[s]->(c:Uppdrag)<-[t]-(d:Beställare)-[u]->(e:Kund) return path union all match (k:Konsult) return k");


        request.done(d3d3);

        //the helper function provided by neo4j documents
        function idIndex(a, id) {
            for (var i = 0; i < a.length; i++) {
                if (a[i].id == id) return i;
            }
            return null;
        }

        function d3d3(y) {
                // parsing the output of neo4j rest api
            var nodes = [], links = [];
            y.results[0].data.forEach(function (row) {
                row.graph.nodes.forEach(function (n) {
                    if (idIndex(nodes, n.id) == null) {
                        var property = [];
                        for (var item in n.properties) {
                            //console.log("<br>" + item + ": " + n.properties[item]);
                            property.push("<br><strong>" + item + ": </strong>" + n.properties[item]);
                        }
                        //console.log(property);
                                                                                        //, props: n.property 
                        nodes.push({ id: n.id, label: n.labels[0], title: n.properties.Namn, props: property });

                    }
                });
                links = links.concat(row.graph.relationships.map(function (r) {
                    // the neo4j documents has an error : replace start with source and end with target
                    return { source: idIndex(nodes, r.startNode), target: idIndex(nodes, r.endNode), type: r.type };
                }));
            });
            var graph = { nodes: nodes, links: links };

            // Now do something awesome with the graph!
            var width = $(document).width(), height = $(document).height() - 100, radius = 10;

            var color = d3.scale.category20();

            var zoom = d3.behavior.zoom()
                    .scaleExtent([0.5, 5])
                    .on("zoom", zoomed);

            var drag = d3.behavior.drag()
                    .origin(function (d) { return d; })
                    .on("dragstart", dragstarted)
                    .on("drag", dragged)
                    .on("dragend", dragended);

            var svg = d3.select("#visual").append("svg")
                    .attr("width", width).attr("height", height)
                    .attr("pointer-events", "all")
                    //.append("g")  // Om den är med kan man bara zooma och panorera med pekaren över noden.
                    .call(zoom);

            var force = d3.layout.force()
                    .gravity(.30)
                    .charge(-500)
                    .size([width, height]);

            force
                .nodes(graph.nodes)
                .links(graph.links)
                .start();

            var container = svg.append("g");

            var link = container.selectAll(".link")
                    .data(graph.links)
                    .enter()
                    .append("line")
                    .attr("class", "link");

            var node = container.selectAll(".node")
                    .data(graph.nodes)
                    .enter().append("g")
                    .call(force.drag);

            node.append("circle")
                //.attr("class", function (d) { return "node " + d.label })
                //.attr("r", radius - .75)
                .attr("r", function (d) {
                    var size;
                    switch (d.label) {
                        case "Konsult":

                            radius = 12;
                            break;
                        case "Uppdrag":
                        case "Kund":
                            radius = 15;
                            break;
                        case "Beställare":
                        case "Uppgift":
                            radius = 5;
                            break;
                        default: radius = 8;
                    }
                    return radius;
                })
                .attr("fill", function (d) { return color(d.label); })
                .attr("class", function (d) { return d.label })
                .style("stroke", function (d) { return d3.rgb(color(d.label)).darker(); })
                .on("mouseover", fade(.2, 1))
                .on("mouseout", fade(1, 0))
                .on("click", click);

            node.append("text")
                .attr("dx", 2 * radius)
                .attr("dy", ".35em")
                .text(function (d) { return d.title });

            force.on("tick", function () {
                node.attr("transform", function (d) { return "translate(" + Math.max(radius, Math.min(width - radius, d.x)) + "," + Math.max(radius, Math.min(height - radius, d.y)) + ")"; });

                link.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });
            });
            // html title attribute Visas när man hovrar över en node. Funkar på både actor och movie.
            node.append("title")
                    .text(function (d) { return d.label; });

            var legend = d3.select("#legend").append("svg")
                .attr("class", "legend")
                .attr("width", 80)
                .attr("height", 140)
                .selectAll("g")
                .data(color.domain().slice().reverse())
                .enter().append("g")
                .attr("x", 10)
                .attr("y", 10)
                .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

            legend.append("rect")
                .attr("width", 18)
                .attr("height", 18)
                .style("fill", color);

            legend.append("text")
                .attr("x", 24)
                .attr("y", 9)
                .attr("dy", ".35em")
                .text(function (d) { return d; });

            function click(d) {
                if (d3.event.defaultPrevented) return; // ignore drag
                var detail = $("#details");
                detail.show();
                var content = $("#detailContent");
               
                content.html("<h3>" + d.title + "</br></h3><p>" + d.label + "</br>" + d.props + "</p>");
                update();
            }

            function fade(opacity, x) {
                return function (d) {
                    node.style("stroke-opacity", function (o) {
                        thisOpacity = isConnected(d, o) ? 1 : opacity;
                        this.setAttribute('fill-opacity', thisOpacity);
                        return thisOpacity;
                    });

                    link.style("stroke-opacity", opacity).style("stroke-opacity", function (o) {
                        return o.source === d || o.target === d ? 1 : opacity;
                    });
                };
            }
            var linkedByIndex = {};
            graph.links.forEach(function (d) {
                linkedByIndex[d.source.index + "," + d.target.index] = 1;
            });

            function isConnected(a, b) {
                return linkedByIndex[a.index + "," + b.index] || linkedByIndex[b.index + "," + a.index] || a.index == b.index;
            }

            function zoomed() {
                container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }

            function dragstarted(d) {
                d3.event.sourceEvent.stopPropagation();

                d3.select(this).classed("dragging", true);
                force.start();
            }

            function dragged(d) {

                d3.select(this).attr("cx", d.x = d3.event.x).attr("cy", d.y = d3.event.y);

            }

            function dragended(d) {

                d3.select(this).classed("dragging", false);
            }
        }

        $('#hide').on('click', function (event) {
            $('#details').hide();
        });

    });
</script>












