@{
    ViewBag.Title = "Graf";
}
<div class="row">
    <p>&nbsp;</p>
    <div id="graph" style="width:100%; height:100%;">


    </div>
    <div id="details" class="col-md-4 pull-right" hidden="hidden">
        <div class="panel panel-default" style="z-index:1000">
            <div class="panel-heading">
                <h3 class="panel-title">Detaljer</h3>
            </div>
            <div class="panel-body">
                Detaljer
            </div>
        </div>

    </div>

</div>
<script src="~/Scripts/d3/d3.min.js"></script>
<script type="text/javascript">
    // The query
    var query = {
        "statements": [{
            "statement": "MATCH path = (n)-[r]->(m) RETURN path",
            "resultDataContents": ["graph", "row"]
        }]
    };

    var graphen;

    //the helper function provided by neo4j documents
    function idIndex(a, id) {
        for (var i = 0; i < a.length; i++) {
            if (a[i].id == id) return i;
        }
        return null;
    }
    // jQuery ajax call
    var request = $.ajax({
        type: "POST",
        url: "http://localhost:7474/db/data/transaction/commit",
        accepts: { json: "application/json" },
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(query),
        //now pass a callback to success to do something with the data
        success: function (data) {
            // parsing the output of neo4j rest api
            var nodes = [], links = [];
            data.results[0].data.forEach(function (row) {
                row.graph.nodes.forEach(function (n) {
                    if (idIndex(nodes, n.id) == null) {
                        nodes.push({ id: n.id, label: n.labels[0], title: n.properties.name });
                    }
                });
                links = links.concat(row.graph.relationships.map(function (r) {
                    // the neo4j documents has an error : replace start with source and end with target
                    return { source: idIndex(nodes, r.startNode), target: idIndex(nodes, r.endNode), type: r.type };
                }));
            });
            var graph = { nodes: nodes, links: links };

            //var width = 1000, height = 800;
            var width = document.documentElement.clientWidth;
            var height = document.documentElement.clientHeight;

            var force = d3.layout.force()
                    .charge(-200)
                    .linkDistance(30)
                    .size([width, height]);

            var svg = d3.select("#graph")
                    .append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .attr("pointer-events", "all");

            var color = d3.scale.category20();

            // create the zoom listener
            var zoomListener = d3.behavior.zoom()
              .scaleExtent([0.1, 3])
              .on("zoom", zoomHandler);

            // function for handling zoom event
            function zoomHandler() {
                vis.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }

            force.nodes(graph.nodes).links(graph.links).start();

            var link = svg.selectAll(".link")
                .data(graph.links)
                .enter()
                .append("line")
                .attr("class", "link")
                .style("stroke-width", 2);

            var node = svg.selectAll(".node")
                .data(graph.nodes).enter()
                .append("circle")
                .attr("class", function (d) { return "node " + d.label })
                .attr("r", 10)
                .attr("fill", function (d) { return color(d.group); })
                .call(force.drag);

            // html title attribute Visas när man hovrar över en node. Funkar på både actor och movie.
            node.append("title")
                    .text(function (d) { return d.name; })


            force.on("tick", function () {
                link.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                node.attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });
            });

        }
    })

</script>





