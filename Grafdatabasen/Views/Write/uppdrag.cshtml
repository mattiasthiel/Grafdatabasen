@{
    ViewBag.Title = "Lägg till/ändra uppdrag";
}
<div class="row">
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>

</div>

<div role="tabpanel">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" id="navTabs">
        <li role="presentation" class="active">@Html.ActionLink("Uppdrag", "", "Write")</li>
        <li role="presentation">@Html.ActionLink("Konsult", "konsult", "Write")</li>
        <li role="presentation">@Html.ActionLink("Kund", "kund", "Write")</li>
        <li role="presentation">@Html.ActionLink("Kompetens", "kompetens", "Write")</li>
    </ul>
    <!-- Tab panes -->
    <div class="tab-content">
        <div id="uppdrag">

@model Grafdatabasen.ViewModels.AddUppdragViewModel

            <div class="row">
                <p>&nbsp;</p>
                @using (Html.BeginForm())
                {
                    <div class="col-md-12">
                        <div class="form-horizontal">

                            <div class="form-group form-group-sm">
                                @Html.LabelFor(m => m.Namn, new { @class = "control-label col-md-1" })
                                <div class="col-md-5" id="uppdragTypeahead">
                                    @Html.EditorFor(m => m.Namn, new { htmlAttributes = new { @class = "form-control typeahead", @placeholder = "Uppdragets namn:", @Style ="width:1000px" } })
                                </div>
                                @Html.LabelFor(m => m.Startdatum, new { @class = "control-label col-md-1" })
                                <div class="col-md-2">
                                    @Html.EditorFor(m => m.Startdatum, new { htmlAttributes = new { @class = "form-control date", @id = "uppdragstartdatumText", @placeholder = "Startdatum:" } })
                                </div>
                                @Html.LabelFor(m => m.Slutdatum, new { @class = "control-label col-md-1" })
                                <div class="col-md-2" id="slutdatum">
                                    @Html.EditorFor(m => m.Slutdatum, new { htmlAttributes = new { @class = "form-control date", @id = "uppdragslutdatumText", @placeholder = "Slutdatum:" } })
                                </div>


                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.Beskrivning, new { @class = "control-label col-md-1" })
                                <div class="col-md-5">
                                    @Html.EditorFor(m => m.Beskrivning, new { htmlAttributes = new { @class = "form-control", @id = "uppdragbeskrivningText", @placeholder = "Beskrivning:", @Styles = "height: 40px" } })
                                </div>
                                @Html.LabelFor(m => m.Problem, new { @class = "control-label col-md-1" })
                                <div class="col-md-5">
                                    @Html.EditorFor(m => m.Problem, new { htmlAttributes = new { @class = "form-control", @id = "uppdragproblemText", placeholder = "Problem:", @Styles = "height: 40px" } })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.Losning, new { @class = "control-label col-md-1" })
                                <div class="col-md-5">
                                    @Html.EditorFor(m => m.Losning, new { htmlAttributes = new { @class = "form-control", @id = "uppdraglosningText", @placeholder = "Lösning:", @Styles = "height: 40px" } })
                                </div>
                                @Html.LabelFor(m => m.Resultat, new { @class = "control-label col-md-1" })
                                <div class="col-md-5">
                                    @Html.EditorFor(m => m.Resultat, new { htmlAttributes = new { @class = "form-control", @id = "uppdragresultatText", placeholder = "Resultat:", @Styles = "height: 40px" } })
                                </div>
                            </div>

                            <div class="form-group form-group-sm">
                                @Html.LabelFor(m => m.Timmar, new { @class = "control-label col-md-1" })
                                <div class="col-md-5">
                                    @Html.EditorFor(m => m.Timmar, new { htmlAttributes = new { @class = "form-control", @id = "uppdragtimmarText", @placeholder = "Timmar:" } })
                                </div>
                                @Html.LabelFor(m => m.Kostnad, new { @class = "control-label col-md-1" })
                                <div class="col-md-5">
                                    @Html.EditorFor(m => m.Kostnad, new { htmlAttributes = new { @class = "form-control", @id = "uppdragkostnadText", placeholder = "Kostnad:" } })
                                </div>
                            </div>

                            <div class="form-group form-group-sm">
                                @Html.LabelFor(m => m.Kund, new { @class = "control-label col-md-1" })
                                <div class="col-md-4 select2-container">
                                    @{
                                        List<SelectListItem> listItem = new List<SelectListItem>();
                                    }
                                    @Html.DropDownListFor(m => m.Kund, listItem, new { id = "KundId", @class = "form-control" })


                                </div>
                                <div class="col-md-1">
                                    @Html.ActionLink("Ny kund ", "showPartialKund", "Write", null, new { @class = "modal-link btn btn-default btn-sm pull-right" })
                                </div>
                                @Html.LabelFor(m => m.Bestallare, new { @class = "control-label col-md-1" })
                                <div class="col-md-5">
                                    @{
                                        List<SelectListItem> listItem2 = new List<SelectListItem>();
                                    }
                                    @Html.DropDownListFor(m => m.Bestallare, listItem2, new { id = "Bestallare", @class = "form-control" })



                                    @Html.EditorFor(m => m.Bestallare, new { htmlAttributes = new { @class = "form-control", @id = "uppdragbestallareText", placeholder = "Beställare:", disabled = "disabled" } })
                                </div>
                            </div>



                            <div class="row">
                                <div class="col-md-4">
                                    <p></p>
                                </div>
                                <div class="col-md-2">
                                </div>
                            </div>

                            <div class="panel panel-default">
                                <!-- Default panel contents -->
                                <div class="panel-heading clearfix">
                                    <h5 class="panel-title pull-left" style="padding-top: 5px;">Konsulter knutna till detta uppdrag:</h5>
                                    @*<input type="submit" value="Lägg till konsult" onclick="location.href='@Url.Action("Index", "Write")'"  id="addUppgiftBtn" class="btn btn-default btn-sm pull-right" />*@
                                    @Html.ActionLink("Lägg till konsult ", "showPartialUppgift", "Write", null, new { @class = "modal-link btn btn-default btn-sm pull-right" })
                                </div>
                                <!-- Table -->
                                <table id="listaKonsulter" class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Konsult</th>
                                            <th>Roll</th>
                                            <th>Beskrivning</th>
                                            <th>Grad</th>
                                            <th>Startdatum</th>
                                            <th>Slutdatum</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <div class="row">
                            </div>

                            <div class="form-group form-group-sm">
                                <div class="col-md-offset-11 ">
                                    <input type="submit" value="Spara" onclick="location.href='@Url.Action("Index", "Write")'" class="btn btn-primary" />
                                </div>
                            </div>

                        </div>
                    </div>

                }
            </div>        
        </div>
    </div>
</div>

<!-- FUSKAT LITE HÄR OCH LADDAT IN JQUERY IGEN , FÖRSÖK HITTA VARFÖR DEN INTE LADDAR-->
@*Scripts.Render("~/Scripts/jquery-2.1.3.min.js")
@Scripts.Render("~/Scripts/typeahead.bundle.js")*@






<script type="text/javascript">
 /*   $(document).ready(function () {

        // The query
        var query = {
            "statements": [{
                "statement": "MATCH (c:Customer) RETURN c"
            }]
        };
        $("#jsonKunder").select2({
            minimumInputLength: 2,  // minimumInputLength for sending ajax request to server
            width: 'resolve',   // to adjust proper width of select2 wrapped elements
            placeholder: "-- Välj Kund: --",
            ajax: {
                type: "POST",
                url: "http://localhost:7474/db/data/transaction/commit",
                contentType: "application/json",
                dataType: "json",
                // data: JSON.stringify(query)  eller skriva cypher direkt:
                data: { "query": "Match (c:Customer) return c.name" },
                //now pass a callback to success to do something with the data
                success: function (data) {
                    console.log(data);
                    //return data.Results;
                }
            }
        });
        
    })


    */
</script>

<script type="text/javascript">
    // The query
    var query = {
        "statements": [{
            "statement": "MATCH path = (n) RETURN path",
            "resultDataContents": ["graph", "row"]
        }]
    };

    var graphen;

    //the helper function provided by neo4j documents
    function idIndex(a, id) {
        for (var i = 0; i < a.length; i++) {
            if (a[i].id == id) return i;
        }
        return null;
    }
    var states = [];
    // jQuery ajax call
    var request = $.ajax({
        type: "POST",
        url: "http://localhost:7474/db/data/transaction/commit",
        accepts: { json: "application/json" },
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(query),
        //now pass a callback to success to do something with the data
        success: function (data) {
            var nodes = [], links = [];
            // parsing the output of neo4j rest api
            data.results[0].data.forEach(function (row) {
                row.graph.nodes.forEach(function (n) {
                    if (idIndex(nodes, n.id) == null) {
                        if (n.labels == "Uppdrag") {
                            states.push(n.properties.Namn);
                        }
                        if (n.labels == "Kund") {
                            $("#KundId").append($("<option>").text(n.properties.Namn).val(n.properties.Namn).attr('KundId', n.id));
                        }
                        if (n.labels == "Bestallare") {
                            $("#Bestallare").append($("<option>").text(n.properties.Namn + ", " + n.properties.Foretag).val(n.properties.Namn).attr('Bestallare', n.id));
                        }

                        nodes.push({ id: n.id, label: n.labels[0], title: n.properties.name });
                    }
                });
                links = links.concat(row.graph.relationships.map(function (r) {
                    // the neo4j documents has an error : replace start with source and end with target
                    return { source: idIndex(nodes, r.startNode), target: idIndex(nodes, r.endNode), type: r.type };
                }));
            });
            graphen = { nodes: nodes, links: links };
            console.log(states);

            var substringMatcher = function (strs) {
                return function findMatches(q, cb) {
                    var matches, substrRegex;

                    // an array that will be populated with substring matches
                    matches = [];

                    // regex used to determine if a string contains the substring `q`
                    substrRegex = new RegExp(q, 'i');

                    // iterate through the pool of strings and for any string that
                    // contains the substring `q`, add it to the `matches` array
                    $.each(strs, function (i, str) {
                        if (substrRegex.test(str)) {
                            // the typeahead jQuery plugin expects suggestions to a
                            // JavaScript object, refer to typeahead docs for more info
                            matches.push({ value: str });
                        }
                    });

                    cb(matches);
                };
            };

            $('#uppdragTypeahead .typeahead').typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            },
            {
                name: 'states',
                displayKey: 'value',
                source: substringMatcher(states)

            });

        }
    });

</script> // uppdragTypeahead
<script type="text/javascript">
    $('#uppdragkundText').on("change", function (e) {
        document.getElementById('uppdragbestallareText').removeAttr('disabled');
        // TODO: Kör ny funktion som hämtar alla beställare för vald kund.
            
    });
</script>
<script type="text/javascript">
    $('#uppdragnamnText').change(function () {
        // TODO: funktion som plockar ut alla attribut för valt uppdrag. 
    });
</script>
