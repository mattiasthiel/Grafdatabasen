@model Grafdatabasen.ViewModels.AddKonsultViewModel

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Stäng</span></button>
    <h4 class="modal-title text-center" id="modalHeader">Lägg till ny Konsult:</h4>
</div>
@using (Html.BeginForm("konsult", "Write", FormMethod.Post))
{
<div class="modal-body">
    <div class="col-md-12">
        <div class="form-horizontal">

            <div class="form-group form-group-sm">
                @Html.LabelFor(m => m.Namn, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Namn, new { htmlAttributes = new { @class = "form-control", placeholder = "Namn:" } })
                </div>
                @Html.LabelFor(m => m.Titel, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Titel, new { htmlAttributes = new { @class = "form-control", placeholder = "Titel:" } })
                </div>
            </div>

            <div class="form-group form-group-sm">
                @Html.LabelFor(m => m.Epost, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Epost, new { htmlAttributes = new { @class = "form-control", @id = "Epost", @placeholder = "Epost:" } })
                </div>
                @Html.LabelFor(m => m.Telefon, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Telefon, new { htmlAttributes = new { @class = "form-control", placeholder = "Telefon:" } })
                </div>
            </div>
            <div class="form-group form-group-sm">
                @Html.LabelFor(m => m.Link, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Link, new { htmlAttributes = new { @class = "form-control", @placeholder = "Link:" } })
                </div>
                @Html.LabelFor(m => m.Kontor, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @{
                        List<SelectListItem> listItem = new List<SelectListItem>();
                    }
                    @Html.DropDownListFor(m => m.Kontor, listItem, new { id = "KontorDrop", @class = "form-control" })


                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Beskrivning, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Beskrivning, new { htmlAttributes = new { @class = "form-control", @placeholder = "Beskrivning:", @Styles = "height: 80px" } })
                </div>

            </div>

        </div>
    </div>
</div>
<div class="modal-footer">
    <input type="submit" value="Spara" onclick="location.href='@Url.Action("konsult", "Write")'" class="btn btn-sm btn-primary" />
</div>
}

<script type="text/javascript">
    $(document).ready(function () {
        var temp = $.parseJSON(sessionStorage.getItem('nodes'));
        console.log(temp);
        temp.forEach(function (row) {
            //console.log(row.graph.nodes[0].properties.Namn);
            if (row.graph.nodes[0].labels == "Kontor") {
                $("#KontorDrop").append($("<option>").text(row.graph.nodes[0].properties.Namn).val(row.graph.nodes[0].properties.Namn).attr('Kontor', row.graph.nodes[0].id));
            }
    })
});


/*
    // The query
    var query = {
        "statements": [{
            "statement": "MATCH path = (n) RETURN path",
            "resultDataContents": ["graph", "row"]
        }]
    };

    var graphen;

    //the helper function provided by neo4j documents
    function idIndex(a, id) {
        for (var i = 0; i < a.length; i++) {
            if (a[i].id == id) return i;
        }
        return null;
    }
    sessionStorage.clear();
    // jQuery ajax call
    var request = $.ajax({
        type: "POST",
        url: "http://localhost:7474/db/data/transaction/commit",
        accepts: { json: "application/json" },
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(query),
        //now pass a callback to success to do something with the data
        success: function (data) {
            console.log(data);
            sessionStorage.setItem('data', JSON.stringify(data.results[0].data));

            var nodes = [], links = [];
            // parsing the output of neo4j rest api
            data.results[0].data.forEach(function (row) {
                row.graph.nodes.forEach(function (n) {
                    if (idIndex(nodes, n.id) == null) {
                        if (n.labels == "Kontor") {
                            console.log(n.properties.Namn)
                            $("#Kontor").append($("<option>").text(n.properties.Namn).val(n.properties.Namn).attr('Kontor', n.id));
                        }

                        nodes.push({ id: n.id, label: n.labels[0], title: n.properties.name });
                    }
                });
                links = links.concat(row.graph.relationships.map(function (r) {
                    // the neo4j documents has an error : replace start with source and end with target
                    return { source: idIndex(nodes, r.startNode), target: idIndex(nodes, r.endNode), type: r.type };
                }));
            });
            graphen = { nodes: nodes, links: links };
        }
    });
    */
</script>

