@model Grafdatabasen.ViewModels.AddKompetensViewModel

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Stäng</span></button>
    <h4 class="modal-title text-center" id="modalHeader">Ändra kompetens:</h4>
</div>
@using (Html.BeginForm("EditKompetens", "Write", FormMethod.Post))
{
<div class="modal-body">
    <div class="col-md-12">
        <div class="form-horizontal">

            <div>
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(m => m.Namn)
                    </dt>
                    <dd>
                        @Html.DisplayTextFor(m => m.Namn)
                        @Html.HiddenFor(m => m.Namn)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(m => m.Kompetenstyp)
                    </dt>
                    <dd>
                        @Html.DisplayTextFor(m => m.Kompetenstyp)
                        @Html.HiddenFor(m => m.Konsult)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(m => m.Beskrivning)
                    </dt>
                    <dd>
                        @Html.DisplayTextFor(m => m.Beskrivning)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(m => m.Niva)
                    </dt>
                    <dd>
                        @Html.EditorFor(m => m.Niva, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nivå:", @Styles = "height: 40px" } })
                    </dd>
                </dl>
            </div>
    @*
            <div class="form-group form-group-sm">
                @Html.DisplayNameFor(m => m.Namn)
                <div class="col-md-5" id="KompetensNamn">
                    @Html.DisplayTextFor(m => m.Namn )
                </div>
                @Html.LabelFor(m => m.Kompetenstyp, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @{
                        List<SelectListItem> listItem = new List<SelectListItem>();
                    }
                    @Html.DropDownListFor(m => m.Kompetenstyp, listItem, new { @id = "TypModal", @class = "form-control" })
                </div>
            </div>
            <div class="form-group form-group-sm">
                @Html.LabelFor(m => m.Beskrivning, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Beskrivning, new { htmlAttributes = new { @id = "BeskrivningModal", @class = "form-control", @placeholder = "Beskrivning:", @Styles = "height: 40px" } })
                </div>
                @Html.LabelFor(m => m.Niva, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Niva, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nivå:", @Styles = "height: 40px" } })
                </div>
            </div>

            <div class="form-group form-group-sm" id="Doldkonsult">
                @Html.LabelFor(m => m.Konsult, new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(m => m.Konsult, new { htmlAttributes = new { @id = "Doldkonsultnamn", @class = "form-control", @placeholder = "Beskrivning:", @Styles = "height: 40px" } })
                </div>
            </div>

        *@
        </div>
    </div>
</div>
<div class="modal-footer">
    <input type="submit" value="Spara" onclick="location.href='@Url.Action("EditKompetens", "Write", null)'" id="sparaKnapp" class="btn btn-sm btn-primary" />

</div>
}
<script type="text/javascript">
    var states = [];
    var temp = $.parseJSON(sessionStorage.getItem('nodes'));
    temp.forEach(function (row){
        row.graph.nodes[0].labels.forEach(function (n){
            if (n == "Kompetens"){
                states.push(row.graph.nodes[0].properties.Namn);
            }
        })
        
    });
    
    var substringMatcher = function (strs) {
        return function findMatches(q, cb) {
            var matches, substrRegex;

            // an array that will be populated with substring matches
            matches = [];

            // regex used to determine if a string contains the substring `q`
            substrRegex = new RegExp(q, 'i');

            // iterate through the pool of strings and for any string that
            // contains the substring `q`, add it to the `matches` array
            $.each(strs, function (i, str) {
                if (substrRegex.test(str)) {
                    // the typeahead jQuery plugin expects suggestions to a
                    // JavaScript object, refer to typeahead docs for more info
                    matches.push({ value: str });
                }
            });

            cb(matches);
        };
    };

    $('#KompetensNamn .typeahead').typeahead({
        hint: true,
        highlight: true,
        minLength: 1
    },
    {
        name: 'states',
        displayKey: 'value',
        source: substringMatcher(states)
    });
    console.log(temp);
    $('#KompetensNamn').on('typeahead:selected', function (e, kompetens) {
        temp.forEach(function (row){
            if (row.graph.nodes[0].properties.Namn == kompetens['value']){
                //$('#TypModal:text').val(row.graph.nodes[0].properties.Typ);
                $('#TypModal').empty();

                $('#BeskrivningModal:text').val(row.graph.nodes[0].properties.Beskrivning);
                $("#TypModal").append($("<option>").text(row.graph.nodes[0].properties.Typ).val(row.graph.nodes[0].properties.Typ).attr('Typ', row.graph.nodes[0].id));

            }
        });
    }).on('typeahead:autocompleted', function (e, kompetens) {
        temp.forEach(function (row){
            if (row.graph.nodes[0].properties.Namn == kompetens['value']){
                //$('#TypModal:text').val(row.graph.nodes[0].properties.Typ);
                $('#TypModal').empty();

                $('#BeskrivningModal:text').val(row.graph.nodes[0].properties.Beskrivning);
                $("#TypModal").append($("<option>").text(row.graph.nodes[0].properties.Typ).val(row.graph.nodes[0].properties.Typ).attr('Typ', row.graph.nodes[0].id));

            }
        });
    }).on('change', function () {
        $('#TypModal').empty();
        $("#TypModal").append($("<option>").text("Teknik").val("Teknik").attr('Typ', 1));
        $("#TypModal").append($("<option>").text("Metod").val("Metod").attr('Typ', 2));
        $("#TypModal").append($("<option>").text("Område").val("Område").attr('Typ', 3));
    });
    

    $(function () {
        $('#uppdateraKompetens').click(function () {
            $('#modal-container').modal('hide');
        });
    });
</script>

